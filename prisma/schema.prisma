generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique // Removed @db.ObjectId to allow for custom IDs
  name      String
  imageUrl  String   @db.String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  servers  Server[]
  members  Member[]
  channels Channel[]
}

model Server {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String @db.String
  inviteCode String @unique
  profileId  String @db.ObjectId // This remains an ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  Member[]
  channels Channel[]

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  profileId     String          @db.ObjectId
  serverId      String          @db.ObjectId
  messages      Message[]
  directMessage DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server  Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)

  converstionInitiated Conversation[] @relation("MemberOne")
  conversationReceived Conversation[] @relation("MemberTwo")
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      ChannelType @default(TEXT)
  profileId String      @db.ObjectId
  serverId  String      @db.ObjectId

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server  Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

model Message {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String @db.String

  fileUrl String? @db.String

  memberId String @db.ObjectId

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String  @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  memberOneId String @db.ObjectId
  memberTwoId String @db.ObjectId

  memberOne     Member          @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwo     Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessage DirectMessage[]

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String  @db.ObjectId
  fileUrl        String? @db.String
  deleted        Boolean @default(false)

  memberId       String @db.ObjectId
  conversationID String @db.ObjectId

  member       Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationID], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
